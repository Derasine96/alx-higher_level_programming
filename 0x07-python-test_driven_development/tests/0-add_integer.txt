Add Integer Function
===================

This is an example test file for the `add_integer` function.

Import the `add_integer` function from the `my_module` module:

.. code-block:: python

    >>> add_integer = __import__('0-add_integer').add_integer

Perform simple addition:

.. code-block:: python

    >>> add_integer(4, 5)
    9
    >>> add_integer(14, 27)
    41

When calling the function with a single argument, it returns the number plus 98:

.. code-block:: python

    >>> add_integer(1)
    99


Handling Negative Numbers
-------------------------

You can also add negative numbers:

.. code-block:: python

    >>> add_integer(-1, -2)
    -3
    >>> add_integer(-6, -7)
    -13

Handling Large Positive Integers
------------------------------

The function works with large positive integers as well:

.. code-block:: python

    >>> add_integer(10**6, 10**7)
    11000000

Using Keyword Syntax
-------------------

You can also use the keyword syntax for calling functions with optional arguments:

.. code-block:: python

    >>> add_integer(a=12, b=25)
    37

Handling Float Values
---------------------

If arguments passed are of float type, the function typecasts them into integers before addition:

.. code-block:: python

    >>> add_integer(1.5, 2.5)
    3
    >>> add_integer(0.000001, 0.000002)
    0

Combining Floating and Non-Floating Values
-----------------------------------------

Floating and non-floating values can be combined:

.. code-block:: python

    >>> add_integer(1.5, 2)
    3

Handling Errors
---------------

The function raises a `TypeError` if you pass invalid types as arguments:

.. code-block:: python

    >>> add_integer('one', 'two') # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    ...
    TypeError: Input must be integers or float

.. code-block:: python

    >>> add_integer(None)
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

.. code-block:: python

    >>> add_integer(4, 'None')
    Traceback (most recent call last):
    ...
    TypeError: b must be an integer

If both arguments are non-integers and non-floats, a `TypeError` message is only
printed for the first argument:

.. code-block:: python

    >>> add_integer("string", "another")
    Traceback (most recent call last):
    ...
    TypeError: a must be an integer

Handling Overflow
----------------

The function also handles overflow with very large floats:

.. code-block:: python

    >>> add_integer(1e309, 4e309) # doctest: +IGNORE_EXCEPTION_DETAIL
    Traceback (most recent call last):
    ...
    OverflowError: int too large to convert to float

Invalid Keyword Argument
------------------------

If you provide an invalid keyword argument, the function raises a `TypeError`:

.. code-block:: python

    >>> add_integer(a=2, c=4)
    Traceback (most recent call last):
    ...
    TypeError: add_integer() got an unexpected keyword argument 'c'
